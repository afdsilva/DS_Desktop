
import config.*;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import system.*;

public class Janela extends javax.swing.JFrame {

    private Config config;
    private CardLayout janelas;
    private JsonParser json;
    private Logger log;
    private ArrayList<Pedido> listaPedidos;
    //private ArrayList<Atividade> listaAtividades;
    private String CurrentView;
    private boolean flag;
    private boolean flagPedido;
    
    private Pedido pedidoAtual;

    /**
     * CONSTRUTOR Instancia todos os componentes e classes necessários para
     * execução do programa.
     */
    public Janela() {
        initComponents();
        this.config = Config.getInstancia();
        this.log = config.getLog();
        this.setSize(config.getWidth(), config.getHeight());
        this.setMinimumSize(new java.awt.Dimension(config.getWidth(), config.getHeight()));
        this.janelas = (CardLayout) painelBase.getLayout();
        this.janelas.show(painelBase, "painelHome");
        this.CurrentView = "painelHome";
        this.json = new JsonParser();
        carregaSistema();
        setAllFonts();
        this.listaPedidos = new ArrayList<>();
        //this.listaAtividades = new ArrayList<>();
        carregarTabelaPedidos();
        this.pedidoAtual = new Pedido();
        this.flag = false;
        this.flagPedido = false;
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painelBase = new javax.swing.JPanel();
        painelHome = new javax.swing.JPanel();
        cabecalhoHome = new javax.swing.JPanel();
        labelCabecalho = new javax.swing.JLabel();
        painelGroupListaDePedidos = new javax.swing.JPanel();
        scrollTabelaHome = new javax.swing.JScrollPane();
        tabelaPedidos = new javax.swing.JTable();
        botaoCarregarPedido = new javax.swing.JButton();
        botaoNovoPedido = new javax.swing.JButton();
        botaoRemoverPedido = new javax.swing.JButton();
        painelGroupResumoPedido = new javax.swing.JPanel();
        pesquisa = new javax.swing.JLabel();
        ensino = new javax.swing.JLabel();
        extensao = new javax.swing.JLabel();
        pesquisaIcone = new javax.swing.JLabel();
        ensinoIcone = new javax.swing.JLabel();
        extensaoIcone = new javax.swing.JLabel();
        labelNome = new javax.swing.JLabel();
        nomeAluno = new javax.swing.JLabel();
        hrMinPes = new javax.swing.JLabel();
        hrAprPes = new javax.swing.JLabel();
        hrAprEns = new javax.swing.JLabel();
        hrMinEns = new javax.swing.JLabel();
        hrAprExt = new javax.swing.JLabel();
        hrMinExt = new javax.swing.JLabel();
        botaoSair = new javax.swing.JButton();
        painelIdentifica = new javax.swing.JPanel();
        cabecalhoIdentifica = new javax.swing.JPanel();
        labelCabecalhoIdentificacao = new javax.swing.JLabel();
        botaoProximo = new javax.swing.JButton();
        botaoCancelar = new javax.swing.JButton();
        painelGroupIdentificacao = new javax.swing.JPanel();
        textNomeIdentificacao = new javax.swing.JTextField();
        labelNomeIdentificacao = new javax.swing.JLabel();
        labelMatriculaIdentificacao = new javax.swing.JLabel();
        textMatriculaIdentificacao = new javax.swing.JTextField();
        comboCursoIdentificacao = new javax.swing.JComboBox();
        labelCursoIdentificacao = new javax.swing.JLabel();
        painelAtividades = new javax.swing.JPanel();
        cabecalhoAtividades = new javax.swing.JPanel();
        labelCabecalhoAtividades = new javax.swing.JLabel();
        botaoFinalizar = new javax.swing.JButton();
        painelGroupAtividade = new javax.swing.JPanel();
        labelDescricao = new javax.swing.JLabel();
        labelTipoAtividade = new javax.swing.JLabel();
        labelCategoria = new javax.swing.JLabel();
        labelUnidade = new javax.swing.JLabel();
        textUnidade = new javax.swing.JTextField();
        textDescricao = new javax.swing.JTextField();
        comboTipoAtividadeAtividades = new javax.swing.JComboBox();
        comboCategoriaAtividades = new javax.swing.JComboBox();
        botaoCadastrar = new javax.swing.JButton();
        botaoLimpar = new javax.swing.JButton();
        botaoRemoverAtividade = new javax.swing.JButton();
        painelGroupListaDeAtividades = new javax.swing.JPanel();
        scrollPaneListaDeAtividades = new javax.swing.JScrollPane();
        tabelaAtividades = new javax.swing.JTable();
        botaoVoltar = new javax.swing.JButton();
        textMatriculaAtividades = new javax.swing.JTextField();
        comboCursoAtividades = new javax.swing.JComboBox();
        labelCursoAtividades = new javax.swing.JLabel();
        labelMatriculaAtividades = new javax.swing.JLabel();
        textNomeAtividades = new javax.swing.JTextField();
        labelNomeAtividades = new javax.swing.JLabel();
        painelGroupResumoPedido1 = new javax.swing.JPanel();
        pesquisa1 = new javax.swing.JLabel();
        ensino1 = new javax.swing.JLabel();
        extensao1 = new javax.swing.JLabel();
        pesquisaIcone1 = new javax.swing.JLabel();
        ensinoIcone1 = new javax.swing.JLabel();
        extensaoIcone1 = new javax.swing.JLabel();
        nomeAluno1 = new javax.swing.JLabel();
        hrMinPes1 = new javax.swing.JLabel();
        hrAprPes1 = new javax.swing.JLabel();
        hrAprEns1 = new javax.swing.JLabel();
        hrMinEns1 = new javax.swing.JLabel();
        hrAprExt1 = new javax.swing.JLabel();
        hrMinExt1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        painelBase.setPreferredSize(new java.awt.Dimension(1024, 768));
        painelBase.setLayout(new java.awt.CardLayout());

        painelHome.setMinimumSize(new java.awt.Dimension(900, 700));
        painelHome.setPreferredSize(new java.awt.Dimension(900, 700));

        cabecalhoHome.setBackground(new java.awt.Color(255, 255, 255));

        labelCabecalho.setBackground(new java.awt.Color(255, 255, 255));
        labelCabecalho.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/img/sistac.png"))); // NOI18N

        javax.swing.GroupLayout cabecalhoHomeLayout = new javax.swing.GroupLayout(cabecalhoHome);
        cabecalhoHome.setLayout(cabecalhoHomeLayout);
        cabecalhoHomeLayout.setHorizontalGroup(
            cabecalhoHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cabecalhoHomeLayout.createSequentialGroup()
                .addComponent(labelCabecalho, javax.swing.GroupLayout.PREFERRED_SIZE, 695, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        cabecalhoHomeLayout.setVerticalGroup(
            cabecalhoHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelCabecalho, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        painelGroupListaDePedidos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Lista de Pedidos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        tabelaPedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Matricula", "Nome", "Curso"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaPedidos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaPedidosMouseClicked(evt);
            }
        });
        scrollTabelaHome.setViewportView(tabelaPedidos);

        botaoCarregarPedido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/img/carregar2.png"))); // NOI18N
        botaoCarregarPedido.setText("Carregar");
        botaoCarregarPedido.setToolTipText("");
        botaoCarregarPedido.setEnabled(false);
        botaoCarregarPedido.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botaoCarregarPedido.setMaximumSize(new java.awt.Dimension(75, 60));
        botaoCarregarPedido.setMinimumSize(new java.awt.Dimension(75, 60));
        botaoCarregarPedido.setPreferredSize(new java.awt.Dimension(75, 60));
        botaoCarregarPedido.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botaoCarregarPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCarregarPedidoActionPerformed(evt);
            }
        });

        botaoNovoPedido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/img/novo2.png"))); // NOI18N
        botaoNovoPedido.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botaoNovoPedido.setLabel("Novo");
        botaoNovoPedido.setMaximumSize(new java.awt.Dimension(75, 60));
        botaoNovoPedido.setMinimumSize(new java.awt.Dimension(75, 60));
        botaoNovoPedido.setPreferredSize(new java.awt.Dimension(75, 60));
        botaoNovoPedido.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botaoNovoPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoNovoPedidoActionPerformed(evt);
            }
        });

        botaoRemoverPedido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/img/remover2.png"))); // NOI18N
        botaoRemoverPedido.setText("Remover");
        botaoRemoverPedido.setEnabled(false);
        botaoRemoverPedido.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botaoRemoverPedido.setPreferredSize(new java.awt.Dimension(75, 60));
        botaoRemoverPedido.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botaoRemoverPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRemoverPedidoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelGroupListaDePedidosLayout = new javax.swing.GroupLayout(painelGroupListaDePedidos);
        painelGroupListaDePedidos.setLayout(painelGroupListaDePedidosLayout);
        painelGroupListaDePedidosLayout.setHorizontalGroup(
            painelGroupListaDePedidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelGroupListaDePedidosLayout.createSequentialGroup()
                .addGroup(painelGroupListaDePedidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(painelGroupListaDePedidosLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(botaoNovoPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botaoCarregarPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botaoRemoverPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrollTabelaHome, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE))
                .addContainerGap())
        );
        painelGroupListaDePedidosLayout.setVerticalGroup(
            painelGroupListaDePedidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelGroupListaDePedidosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollTabelaHome, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(painelGroupListaDePedidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(botaoRemoverPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoCarregarPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoNovoPedido, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        painelGroupResumoPedido.setBorder(javax.swing.BorderFactory.createTitledBorder("Aproveitamento"));
        painelGroupResumoPedido.setPreferredSize(new java.awt.Dimension(200, 330));

        pesquisa.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        pesquisa.setText("Pesquisa");

        ensino.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        ensino.setText("Ensino");

        extensao.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        extensao.setText("Extensão");

        pesquisaIcone.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/img/pesquisa.png"))); // NOI18N

        ensinoIcone.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/img/ensino.png"))); // NOI18N

        extensaoIcone.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/img/extensao.png"))); // NOI18N

        labelNome.setText("Aluno");

        hrMinPes.setText("jLabel9");

        hrAprPes.setText("jLabel10");

        hrAprEns.setText("jLabel11");

        hrMinEns.setText("jLabel12");

        hrAprExt.setText("jLabel13");

        hrMinExt.setText("jLabel14");

        javax.swing.GroupLayout painelGroupResumoPedidoLayout = new javax.swing.GroupLayout(painelGroupResumoPedido);
        painelGroupResumoPedido.setLayout(painelGroupResumoPedidoLayout);
        painelGroupResumoPedidoLayout.setHorizontalGroup(
            painelGroupResumoPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelGroupResumoPedidoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelNome)
                .addGap(18, 18, 18)
                .addComponent(nomeAluno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(painelGroupResumoPedidoLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(painelGroupResumoPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(painelGroupResumoPedidoLayout.createSequentialGroup()
                        .addGroup(painelGroupResumoPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ensinoIcone)
                            .addComponent(pesquisaIcone))
                        .addGroup(painelGroupResumoPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelGroupResumoPedidoLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(painelGroupResumoPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(painelGroupResumoPedidoLayout.createSequentialGroup()
                                        .addComponent(hrMinEns)
                                        .addGap(18, 18, 18)
                                        .addComponent(hrAprEns))
                                    .addGroup(painelGroupResumoPedidoLayout.createSequentialGroup()
                                        .addGap(13, 13, 13)
                                        .addComponent(hrMinPes)
                                        .addGap(18, 18, 18)
                                        .addComponent(hrAprPes))))
                            .addGroup(painelGroupResumoPedidoLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(ensino, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(painelGroupResumoPedidoLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(pesquisa)))
                        .addGap(5, 5, 5))
                    .addGroup(painelGroupResumoPedidoLayout.createSequentialGroup()
                        .addComponent(extensaoIcone)
                        .addGap(18, 18, 18)
                        .addComponent(extensao))
                    .addGroup(painelGroupResumoPedidoLayout.createSequentialGroup()
                        .addComponent(hrMinExt)
                        .addGap(45, 45, 45)
                        .addComponent(hrAprExt)))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        painelGroupResumoPedidoLayout.setVerticalGroup(
            painelGroupResumoPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelGroupResumoPedidoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelGroupResumoPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNome)
                    .addComponent(nomeAluno))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(painelGroupResumoPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelGroupResumoPedidoLayout.createSequentialGroup()
                        .addComponent(pesquisa)
                        .addGap(18, 18, 18)
                        .addGroup(painelGroupResumoPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hrMinPes)
                            .addComponent(hrAprPes)))
                    .addComponent(pesquisaIcone))
                .addGap(18, 18, 18)
                .addGroup(painelGroupResumoPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ensinoIcone)
                    .addComponent(ensino))
                .addGap(18, 18, 18)
                .addGroup(painelGroupResumoPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hrMinEns)
                    .addComponent(hrAprEns))
                .addGap(18, 18, 18)
                .addGroup(painelGroupResumoPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(extensaoIcone)
                    .addGroup(painelGroupResumoPedidoLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(extensao)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painelGroupResumoPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hrAprExt)
                    .addComponent(hrMinExt))
                .addGap(39, 39, 39))
        );

        botaoSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/img/sair.png"))); // NOI18N
        botaoSair.setText("Sair");
        botaoSair.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botaoSair.setMaximumSize(new java.awt.Dimension(75, 60));
        botaoSair.setMinimumSize(new java.awt.Dimension(75, 60));
        botaoSair.setPreferredSize(new java.awt.Dimension(75, 60));
        botaoSair.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botaoSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelHomeLayout = new javax.swing.GroupLayout(painelHome);
        painelHome.setLayout(painelHomeLayout);
        painelHomeLayout.setHorizontalGroup(
            painelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cabecalhoHome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(painelHomeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelGroupListaDePedidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(painelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(painelGroupResumoPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoSair, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        painelHomeLayout.setVerticalGroup(
            painelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelHomeLayout.createSequentialGroup()
                .addComponent(cabecalhoHome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(painelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelHomeLayout.createSequentialGroup()
                        .addComponent(painelGroupResumoPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botaoSair, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(painelGroupListaDePedidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(157, Short.MAX_VALUE))
        );

        painelBase.add(painelHome, "painelHome");

        painelIdentifica.setMaximumSize(new java.awt.Dimension(900, 700));
        painelIdentifica.setMinimumSize(new java.awt.Dimension(900, 700));
        painelIdentifica.setPreferredSize(new java.awt.Dimension(900, 700));

        cabecalhoIdentifica.setBackground(new java.awt.Color(255, 255, 255));

        labelCabecalhoIdentificacao.setBackground(new java.awt.Color(255, 255, 255));
        labelCabecalhoIdentificacao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/img/sistac.png"))); // NOI18N

        javax.swing.GroupLayout cabecalhoIdentificaLayout = new javax.swing.GroupLayout(cabecalhoIdentifica);
        cabecalhoIdentifica.setLayout(cabecalhoIdentificaLayout);
        cabecalhoIdentificaLayout.setHorizontalGroup(
            cabecalhoIdentificaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cabecalhoIdentificaLayout.createSequentialGroup()
                .addComponent(labelCabecalhoIdentificacao, javax.swing.GroupLayout.PREFERRED_SIZE, 902, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        cabecalhoIdentificaLayout.setVerticalGroup(
            cabecalhoIdentificaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelCabecalhoIdentificacao, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        botaoProximo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/img/proximo-2.png"))); // NOI18N
        botaoProximo.setText("Próximo");
        botaoProximo.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        botaoProximo.setMaximumSize(new java.awt.Dimension(130, 45));
        botaoProximo.setMinimumSize(new java.awt.Dimension(130, 45));
        botaoProximo.setPreferredSize(new java.awt.Dimension(100, 45));
        botaoProximo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoProximoActionPerformed(evt);
            }
        });

        botaoCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/img/cancelar.png"))); // NOI18N
        botaoCancelar.setText("Cancelar");
        botaoCancelar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        botaoCancelar.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        botaoCancelar.setMaximumSize(new java.awt.Dimension(130, 45));
        botaoCancelar.setMinimumSize(new java.awt.Dimension(130, 45));
        botaoCancelar.setPreferredSize(new java.awt.Dimension(130, 45));
        botaoCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCancelarActionPerformed(evt);
            }
        });

        painelGroupIdentificacao.setBorder(javax.swing.BorderFactory.createTitledBorder("Identificação"));

        labelNomeIdentificacao.setText("Nome");

        labelMatriculaIdentificacao.setText("Matricula");

        textMatriculaIdentificacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textMatriculaIdentificacaoActionPerformed(evt);
            }
        });

        labelCursoIdentificacao.setText("Curso");

        javax.swing.GroupLayout painelGroupIdentificacaoLayout = new javax.swing.GroupLayout(painelGroupIdentificacao);
        painelGroupIdentificacao.setLayout(painelGroupIdentificacaoLayout);
        painelGroupIdentificacaoLayout.setHorizontalGroup(
            painelGroupIdentificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelGroupIdentificacaoLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(painelGroupIdentificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelNomeIdentificacao, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelMatriculaIdentificacao)
                    .addComponent(labelCursoIdentificacao, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(painelGroupIdentificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboCursoIdentificacao, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textMatriculaIdentificacao, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textNomeIdentificacao, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(415, Short.MAX_VALUE))
        );
        painelGroupIdentificacaoLayout.setVerticalGroup(
            painelGroupIdentificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelGroupIdentificacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelGroupIdentificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNomeIdentificacao)
                    .addComponent(textNomeIdentificacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painelGroupIdentificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textMatriculaIdentificacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelMatriculaIdentificacao))
                .addGap(18, 18, 18)
                .addGroup(painelGroupIdentificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCursoIdentificacao)
                    .addComponent(comboCursoIdentificacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout painelIdentificaLayout = new javax.swing.GroupLayout(painelIdentifica);
        painelIdentifica.setLayout(painelIdentificaLayout);
        painelIdentificaLayout.setHorizontalGroup(
            painelIdentificaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cabecalhoIdentifica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(painelIdentificaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelIdentificaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelIdentificaLayout.createSequentialGroup()
                        .addComponent(botaoCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botaoProximo, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(painelGroupIdentificacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelIdentificaLayout.setVerticalGroup(
            painelIdentificaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelIdentificaLayout.createSequentialGroup()
                .addComponent(cabecalhoIdentifica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(painelGroupIdentificacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelIdentificaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(botaoProximo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botaoCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(402, Short.MAX_VALUE))
        );

        botaoProximo.getAccessibleContext().setAccessibleName("Proximo");

        painelBase.add(painelIdentifica, "painelIdentifica");

        painelAtividades.setMaximumSize(new java.awt.Dimension(900, 700));
        painelAtividades.setMinimumSize(new java.awt.Dimension(900, 700));
        painelAtividades.setPreferredSize(new java.awt.Dimension(900, 700));

        cabecalhoAtividades.setBackground(new java.awt.Color(255, 255, 255));
        cabecalhoAtividades.setPreferredSize(new java.awt.Dimension(800, 100));

        labelCabecalhoAtividades.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/img/sistac.png"))); // NOI18N

        javax.swing.GroupLayout cabecalhoAtividadesLayout = new javax.swing.GroupLayout(cabecalhoAtividades);
        cabecalhoAtividades.setLayout(cabecalhoAtividadesLayout);
        cabecalhoAtividadesLayout.setHorizontalGroup(
            cabecalhoAtividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelCabecalhoAtividades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        cabecalhoAtividadesLayout.setVerticalGroup(
            cabecalhoAtividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelCabecalhoAtividades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        botaoFinalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/img/finalizar.png"))); // NOI18N
        botaoFinalizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botaoFinalizar.setLabel("Finalizar Pedido");
        botaoFinalizar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botaoFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoFinalizarActionPerformed(evt);
            }
        });

        painelGroupAtividade.setBorder(javax.swing.BorderFactory.createTitledBorder("Atividade"));

        labelDescricao.setText("Descrição");

        labelTipoAtividade.setText("Tipo de Atividade");

        labelCategoria.setText("Categoria");

        labelUnidade.setText("Unidade");

        textDescricao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textDescricaoActionPerformed(evt);
            }
        });

        comboTipoAtividadeAtividades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTipoAtividadeAtividadesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelGroupAtividadeLayout = new javax.swing.GroupLayout(painelGroupAtividade);
        painelGroupAtividade.setLayout(painelGroupAtividadeLayout);
        painelGroupAtividadeLayout.setHorizontalGroup(
            painelGroupAtividadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelGroupAtividadeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelGroupAtividadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelCategoria)
                    .addComponent(labelDescricao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelGroupAtividadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelGroupAtividadeLayout.createSequentialGroup()
                        .addComponent(comboCategoriaAtividades, 0, 92, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(labelTipoAtividade)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboTipoAtividadeAtividades, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelUnidade)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textUnidade, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(textDescricao))
                .addContainerGap())
        );
        painelGroupAtividadeLayout.setVerticalGroup(
            painelGroupAtividadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelGroupAtividadeLayout.createSequentialGroup()
                .addGroup(painelGroupAtividadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDescricao)
                    .addComponent(textDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painelGroupAtividadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTipoAtividade)
                    .addComponent(labelUnidade)
                    .addComponent(textUnidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboTipoAtividadeAtividades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelCategoria)
                    .addComponent(comboCategoriaAtividades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        botaoCadastrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/img/add2.png"))); // NOI18N
        botaoCadastrar.setText("Cadastrar");
        botaoCadastrar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botaoCadastrar.setMaximumSize(new java.awt.Dimension(80, 60));
        botaoCadastrar.setMinimumSize(new java.awt.Dimension(80, 60));
        botaoCadastrar.setPreferredSize(new java.awt.Dimension(80, 60));
        botaoCadastrar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botaoCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCadastrarActionPerformed(evt);
            }
        });

        botaoLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/img/clear.png"))); // NOI18N
        botaoLimpar.setText("Limpar");
        botaoLimpar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botaoLimpar.setMaximumSize(new java.awt.Dimension(80, 60));
        botaoLimpar.setMinimumSize(new java.awt.Dimension(80, 60));
        botaoLimpar.setPreferredSize(new java.awt.Dimension(80, 60));
        botaoLimpar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botaoLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoLimparActionPerformed(evt);
            }
        });

        botaoRemoverAtividade.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/img/cancelar.png"))); // NOI18N
        botaoRemoverAtividade.setText("Remover");
        botaoRemoverAtividade.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botaoRemoverAtividade.setMaximumSize(new java.awt.Dimension(80, 60));
        botaoRemoverAtividade.setMinimumSize(new java.awt.Dimension(80, 60));
        botaoRemoverAtividade.setPreferredSize(new java.awt.Dimension(80, 60));
        botaoRemoverAtividade.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botaoRemoverAtividade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRemoverAtividadeActionPerformed(evt);
            }
        });

        painelGroupListaDeAtividades.setBorder(javax.swing.BorderFactory.createTitledBorder("Lista de Atividades Cadastratas"));

        tabelaAtividades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "N°", "Descrição", "Horas"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaAtividades.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaAtividadesMouseClicked(evt);
            }
        });
        scrollPaneListaDeAtividades.setViewportView(tabelaAtividades);

        javax.swing.GroupLayout painelGroupListaDeAtividadesLayout = new javax.swing.GroupLayout(painelGroupListaDeAtividades);
        painelGroupListaDeAtividades.setLayout(painelGroupListaDeAtividadesLayout);
        painelGroupListaDeAtividadesLayout.setHorizontalGroup(
            painelGroupListaDeAtividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelGroupListaDeAtividadesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPaneListaDeAtividades, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                .addContainerGap())
        );
        painelGroupListaDeAtividadesLayout.setVerticalGroup(
            painelGroupListaDeAtividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneListaDeAtividades, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        botaoVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/img/anterior2.png"))); // NOI18N
        botaoVoltar.setText("Voltar");
        botaoVoltar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botaoVoltar.setMaximumSize(new java.awt.Dimension(80, 60));
        botaoVoltar.setMinimumSize(new java.awt.Dimension(80, 60));
        botaoVoltar.setPreferredSize(new java.awt.Dimension(80, 60));
        botaoVoltar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botaoVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoVoltarActionPerformed(evt);
            }
        });

        textMatriculaAtividades.setEditable(false);
        textMatriculaAtividades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textMatriculaAtividadesActionPerformed(evt);
            }
        });

        comboCursoAtividades.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        comboCursoAtividades.setEnabled(false);
        comboCursoAtividades.setKeySelectionManager(null);

        labelCursoAtividades.setText("Curso");

        labelMatriculaAtividades.setText("Matricula");

        textNomeAtividades.setEditable(false);

        labelNomeAtividades.setText("Nome");

        painelGroupResumoPedido1.setBorder(javax.swing.BorderFactory.createTitledBorder("Aproveitamento"));
        painelGroupResumoPedido1.setPreferredSize(new java.awt.Dimension(200, 330));

        pesquisa1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        pesquisa1.setText("Pesquisa");

        ensino1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        ensino1.setText("Ensino");

        extensao1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        extensao1.setText("Extensão");

        pesquisaIcone1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/img/pesquisa.png"))); // NOI18N

        ensinoIcone1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/img/ensino.png"))); // NOI18N

        extensaoIcone1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/static/img/extensao.png"))); // NOI18N

        hrMinPes1.setText("jLabel9");

        hrAprPes1.setText("jLabel10");

        hrAprEns1.setText("jLabel11");

        hrMinEns1.setText("jLabel12");

        hrAprExt1.setText("jLabel13");

        hrMinExt1.setText("jLabel14");

        javax.swing.GroupLayout painelGroupResumoPedido1Layout = new javax.swing.GroupLayout(painelGroupResumoPedido1);
        painelGroupResumoPedido1.setLayout(painelGroupResumoPedido1Layout);
        painelGroupResumoPedido1Layout.setHorizontalGroup(
            painelGroupResumoPedido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelGroupResumoPedido1Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(nomeAluno1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(painelGroupResumoPedido1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(painelGroupResumoPedido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(painelGroupResumoPedido1Layout.createSequentialGroup()
                        .addGroup(painelGroupResumoPedido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ensinoIcone1)
                            .addComponent(pesquisaIcone1))
                        .addGroup(painelGroupResumoPedido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelGroupResumoPedido1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(painelGroupResumoPedido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(painelGroupResumoPedido1Layout.createSequentialGroup()
                                        .addComponent(hrMinEns1)
                                        .addGap(18, 18, 18)
                                        .addComponent(hrAprEns1))
                                    .addGroup(painelGroupResumoPedido1Layout.createSequentialGroup()
                                        .addGap(13, 13, 13)
                                        .addComponent(hrMinPes1)
                                        .addGap(18, 18, 18)
                                        .addComponent(hrAprPes1))))
                            .addGroup(painelGroupResumoPedido1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(ensino1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(painelGroupResumoPedido1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(pesquisa1)))
                        .addGap(5, 5, 5))
                    .addGroup(painelGroupResumoPedido1Layout.createSequentialGroup()
                        .addComponent(extensaoIcone1)
                        .addGap(18, 18, 18)
                        .addComponent(extensao1))
                    .addGroup(painelGroupResumoPedido1Layout.createSequentialGroup()
                        .addComponent(hrMinExt1)
                        .addGap(45, 45, 45)
                        .addComponent(hrAprExt1)))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        painelGroupResumoPedido1Layout.setVerticalGroup(
            painelGroupResumoPedido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelGroupResumoPedido1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nomeAluno1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(painelGroupResumoPedido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelGroupResumoPedido1Layout.createSequentialGroup()
                        .addComponent(pesquisa1)
                        .addGap(18, 18, 18)
                        .addGroup(painelGroupResumoPedido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hrMinPes1)
                            .addComponent(hrAprPes1)))
                    .addComponent(pesquisaIcone1))
                .addGap(18, 18, 18)
                .addGroup(painelGroupResumoPedido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ensinoIcone1)
                    .addComponent(ensino1))
                .addGap(18, 18, 18)
                .addGroup(painelGroupResumoPedido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hrMinEns1)
                    .addComponent(hrAprEns1))
                .addGap(18, 18, 18)
                .addGroup(painelGroupResumoPedido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(extensaoIcone1)
                    .addGroup(painelGroupResumoPedido1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(extensao1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painelGroupResumoPedido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hrAprExt1)
                    .addComponent(hrMinExt1))
                .addGap(39, 39, 39))
        );

        javax.swing.GroupLayout painelAtividadesLayout = new javax.swing.GroupLayout(painelAtividades);
        painelAtividades.setLayout(painelAtividadesLayout);
        painelAtividadesLayout.setHorizontalGroup(
            painelAtividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cabecalhoAtividades, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
            .addGroup(painelAtividadesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelAtividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelAtividadesLayout.createSequentialGroup()
                        .addGroup(painelAtividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(painelAtividadesLayout.createSequentialGroup()
                                .addComponent(botaoVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(botaoRemoverAtividade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(botaoLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(botaoCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(painelGroupAtividade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoFinalizar))
                    .addGroup(painelAtividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(painelAtividadesLayout.createSequentialGroup()
                            .addComponent(labelNomeAtividades)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(textNomeAtividades, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(34, 34, 34)
                            .addComponent(labelMatriculaAtividades)
                            .addGap(18, 18, 18)
                            .addComponent(textMatriculaAtividades, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(39, 39, 39)
                            .addComponent(labelCursoAtividades)
                            .addGap(18, 18, 18)
                            .addComponent(comboCursoAtividades, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(painelAtividadesLayout.createSequentialGroup()
                            .addComponent(painelGroupListaDeAtividades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(painelGroupResumoPedido1, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE))))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        painelAtividadesLayout.setVerticalGroup(
            painelAtividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelAtividadesLayout.createSequentialGroup()
                .addComponent(cabecalhoAtividades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painelAtividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNomeAtividades)
                    .addComponent(textNomeAtividades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textMatriculaAtividades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelMatriculaAtividades)
                    .addComponent(labelCursoAtividades)
                    .addComponent(comboCursoAtividades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painelAtividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(painelGroupListaDeAtividades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painelGroupResumoPedido1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(painelAtividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelAtividadesLayout.createSequentialGroup()
                        .addComponent(painelGroupAtividade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelAtividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelAtividadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(botaoCadastrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(botaoRemoverAtividade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(botaoLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(botaoVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(botaoFinalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(116, Short.MAX_VALUE))
        );

        painelBase.add(painelAtividades, "painelAtividades");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelBase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelBase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textMatriculaIdentificacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textMatriculaIdentificacaoActionPerformed
        // TODO add your handling code here:       
    }//GEN-LAST:event_textMatriculaIdentificacaoActionPerformed

    private void botaoProximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoProximoActionPerformed
        //this.log.log(Level.INFO, "Painel: {0}", this.CurrentView);
        //validacao dos campos
        String nomeAluno = textNomeIdentificacao.getText();
        String matriculaAluno = textMatriculaIdentificacao.getText();
        String cursoAluno = comboCursoIdentificacao.getSelectedItem().toString();
        if (!nomeAluno.isEmpty()
                && (!textMatriculaIdentificacao.getText().isEmpty())
                && (matriculaAluno.length() == 8)
                && (!matriculaAluno.contains(" "))
                && (!matriculaAluno.contains(","))
                && (!matriculaAluno.contains("."))
                && (!matriculaAluno.contains("[a-zA-z]"))
                && comboCursoIdentificacao.getSelectedIndex() != 0) {
            //cria o profile do usuario no momento da identificacao
            novoPedido(nomeAluno, matriculaAluno, Curso.getCurso(cursoAluno));
            this.json.saveRequest(pedidoAtual);

            //seta os atributos na proxima tela
            this.textNomeAtividades.setText(nomeAluno);
            this.textMatriculaAtividades.setText(matriculaAluno);
            this.comboCursoAtividades.setSelectedItem(cursoAluno);

            limparCampos();
            carregarTabelaAtividades();
            //exibe o painel de atividades
            this.janelas.show(painelBase, "painelAtividades");
            this.CurrentView = "painelAtividades";
        }
        else {
            JOptionPane.showMessageDialog(null, "A matrícula deve conter 8 números.", "Formato inválido de matrícula!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botaoProximoActionPerformed

    private void botaoCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCancelarActionPerformed
        this.log.log(Level.INFO, "Painel: {0}", this.CurrentView);
        this.janelas.show(painelBase, "painelHome");
        this.CurrentView = "painelHome";
        carregarTabelaPedidos();
    }//GEN-LAST:event_botaoCancelarActionPerformed

    private void botaoVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoVoltarActionPerformed
        switch (this.CurrentView) {
            case "painelAtividades":
                this.janelas.show(painelBase, "painelIdentifica");
                this.CurrentView = "painelIdentifica";
                break;
            case "painelAtividadesCarregar":
                this.janelas.show(painelBase, "painelHome");
                this.CurrentView = "painelHome";
        }

    }//GEN-LAST:event_botaoVoltarActionPerformed

    private void botaoRemoverAtividadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRemoverAtividadeActionPerformed
        //pega atividade selecionada
        int linhaSelecionada = tabelaAtividades.getSelectedRow();
        //remove a atividade selecionada da lista de atividades do pedido selecionado
        this.pedidoAtual.getListaAtividadesComplementares().remove(linhaSelecionada);
        //atualiza a tabela de atividades na tela
        limparCampos();
        carregarTabelaAtividades();
        mostraCalculos(pedidoAtual);
    }//GEN-LAST:event_botaoRemoverAtividadeActionPerformed

    private void botaoLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoLimparActionPerformed
        limparCampos();
        mostraCalculos(pedidoAtual);
        flag = false;
    }//GEN-LAST:event_botaoLimparActionPerformed

    private void botaoCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCadastrarActionPerformed
        String desc = this.textDescricao.getText();
        String tipoAtividadeCombo = this.comboTipoAtividadeAtividades.getSelectedItem().toString();
        String categoriaCombo = this.comboCategoriaAtividades.getSelectedItem().toString();
        
        if (!this.textDescricao.getText().isEmpty() && (!this.textUnidade.getText().isEmpty()) && !(this.comboTipoAtividadeAtividades.getSelectedIndex() == 0) && !(this.comboCategoriaAtividades.getSelectedIndex() == 0)) {
            Atividade a = new Atividade();
            TipoAtividade tA = TipoAtividade.getTipoAtividade(tipoAtividadeCombo);
            Integer unidade = Integer.parseInt(this.textUnidade.getText());
            Integer selectedIndex = this.tabelaAtividades.getSelectedRow();
            ArrayList<Atividade> listaAtividades = this.pedidoAtual.getListaAtividadesComplementares();
            
            if (this.botaoCadastrar.getText().equals("Cadastrar")) {
                //Nova atividade sendo cadastrada
                tA.setCategoria(Categoria.getCategoria(categoriaCombo));
                switch (tA.getUnidadeTipoAtividade()) {
                    case "unidade":
                        unidade = tA.getMinHoras();
                        break;
                }
                a = new Atividade(this.textDescricao.getText(),tA,unidade);
                listaAtividades.add(a);
                if (this.json.saveRequest(this.pedidoAtual)) {
                    JOptionPane.showMessageDialog(null, "Ok! Sua alteração de pedido foi salva com sucesso!");
                }
            } else {
                //Atividade alterada
                
                if(tA.getUnidadeTipoAtividade().equals("unidade")){
                    unidade = tA.getMinHoras();
                }
                a = this.pedidoAtual.getListaAtividadesComplementares().get(selectedIndex);
                a.setDescricao(desc);
                a.setTipoAtividade(tA);
                a.setCategoria(Categoria.getCategoria(categoriaCombo));
                a.setUnidadeAtividade(unidade);
                
                if (this.json.saveRequest(this.pedidoAtual)) {
                    JOptionPane.showMessageDialog(null, "Ok! Seu pedido foi salvo com sucesso!");
                }
            }
            carregarTabelaAtividades();
            limparCampos();
        }
        mostraCalculos(pedidoAtual);
        
    }//GEN-LAST:event_botaoCadastrarActionPerformed

    private void textDescricaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textDescricaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textDescricaoActionPerformed

    private void botaoFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoFinalizarActionPerformed
        //log.log(Level.INFO, "Painel: {0}", CurrentView);
        
        
        this.json.removerArquivo(this.pedidoAtual.getAluno().getMatricula());
        if (this.json.saveRequest(this.pedidoAtual)) {
            switch(CurrentView) {
                case "painelAtividades":
                    JOptionPane.showMessageDialog(null, "Ok! Sua alteração de pedido foi salva com sucesso!");
                    break;
                case "painelAtividadesCarregar":
                    JOptionPane.showMessageDialog(null, "Ok! Sua alteração de pedido foi salva com sucesso!");
                    break;
            }
            limpaCamposAproveitamento();
        }

        this.pedidoAtual = new Pedido();
        this.janelas.show(painelBase, "painelHome");
        CurrentView = "painelHome";

        DefaultTableModel dtm = (DefaultTableModel) tabelaPedidos.getModel();
        dtm.setRowCount(0);
        carregarTabelaPedidos();
        flagPedido = false;
    }//GEN-LAST:event_botaoFinalizarActionPerformed

    private void textMatriculaAtividadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textMatriculaAtividadesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textMatriculaAtividadesActionPerformed

    private void comboTipoAtividadeAtividadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTipoAtividadeAtividadesActionPerformed
        /**
         * Seta a visibilidade e label do campo unidade conforme o combo Tipo
         * Atividade
         */
        if (comboTipoAtividadeAtividades.getSelectedIndex() != 0) {
            String selTipoAtividade = comboTipoAtividadeAtividades.getSelectedItem().toString();

            String unidade = TipoAtividade.getTipoAtividade(selTipoAtividade).getUnidadeTipoAtividade();
            String categoria = TipoAtividade.getTipoAtividade(selTipoAtividade).getCategoria().getNome();

            this.comboCategoriaAtividades.setSelectedItem(categoria);
            if (!unidade.equals("unidade")) {
                //log.log(Level.INFO, "Unidade: {0}", unidade);
                this.labelUnidade.setVisible(true);
                this.labelUnidade.setText(unidade);
                this.textUnidade.setVisible(true);
                this.textUnidade.setText(null);
            } else {
                this.labelUnidade.setVisible(false);
                this.textUnidade.setVisible(false);
                this.textUnidade.setText("1");
            }
        } else {
            this.labelUnidade.setVisible(false);
            this.textUnidade.setVisible(false);
            if (this.comboCategoriaAtividades.getItemCount() > 0) {
                this.comboCategoriaAtividades.setSelectedIndex(0);
            }
        }
    }//GEN-LAST:event_comboTipoAtividadeAtividadesActionPerformed

    private void tabelaAtividadesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaAtividadesMouseClicked
        //log.log(Level.INFO, "Row: {0}", tabelaAtividades.getSelectedRow());
        int selected = tabelaAtividades.getSelectedRow();
        Atividade a;
        this.botaoLimpar.setText("Novo");
        this.botaoCadastrar.setText("Salvar");
        this.botaoRemoverAtividade.setEnabled(true);
        this.flag = true;
        ArrayList<Atividade> listaAtividades = this.pedidoAtual.getListaAtividadesComplementares();
        if (selected < listaAtividades.size()) {
            a = listaAtividades.get(selected);
            //log.log(Level.INFO, "Descricao: {0}", a.getDescricao());
            //carregarAtividade(selected);
            this.textDescricao.setText(a.getDescricao());
            this.comboTipoAtividadeAtividades.setSelectedItem(a.getTipoAtividade().getDescricao());
            this.comboCategoriaAtividades.setSelectedItem(a.getCategoria().getNome());
            this.textUnidade.setText(a.getUnidadeAtividade().toString());
        }
        
        
        
    }//GEN-LAST:event_tabelaAtividadesMouseClicked

    private void botaoSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSairActionPerformed
        this.dispose();
    }//GEN-LAST:event_botaoSairActionPerformed

    private void botaoRemoverPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRemoverPedidoActionPerformed
        int reply;
        //log.info(this.listaPedidos.get(selecionarPedido()).getAluno().getMatricula());

        reply = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja remover seu pedido?", "Remover?", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            if (json.removerArquivo(this.listaPedidos.get(selecionarPedido()).getAluno().getMatricula())) {
                this.listaPedidos.remove(selecionarPedido());
            }
        }
        carregarTabelaPedidos();
    }//GEN-LAST:event_botaoRemoverPedidoActionPerformed

    private void botaoNovoPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoNovoPedidoActionPerformed
        //this.log.log(Level.INFO, "Painel: {0}", this.CurrentView);
        //Limpa os campos do painel Identificacao
        this.comboCursoIdentificacao.setSelectedIndex(0);
        this.textNomeIdentificacao.setText(null);
        this.textMatriculaIdentificacao.setText(null);
        this.textDescricao.setName(null);
        //exibe o painel
        this.janelas.show(painelBase, "painelIdentifica");
        this.CurrentView = "painelIdentifica";
    }//GEN-LAST:event_botaoNovoPedidoActionPerformed

    private void botaoCarregarPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCarregarPedidoActionPerformed
        if (selecionarPedido() < listaPedidos.size()) {
            this.pedidoAtual = listaPedidos.get(tabelaPedidos.getSelectedRow());
            carregarPedido();
            this.janelas.show(painelBase, "painelAtividades");
            this.CurrentView = "painelAtividadesCarregar";
        }
    }//GEN-LAST:event_botaoCarregarPedidoActionPerformed

    private void tabelaPedidosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaPedidosMouseClicked

        Pedido pedido = listaPedidos.get(selecionarPedido());
        mostraCalculos(pedido);
        ListSelectionModel listSelectionModel = this.tabelaPedidos.getSelectionModel();

        if (listSelectionModel.isSelectionEmpty()){
            botaoCarregarPedido.setEnabled(false);
            botaoRemoverPedido.setEnabled(false);
            this.tabelaPedidos.clearSelection();
        }else{
            listaPedidos.get(selecionarPedido());
            botaoCarregarPedido.setEnabled(true);
            botaoRemoverPedido.setEnabled(true);
        }
        labelNome.setText(pedido.getAluno().getNome());
    }//GEN-LAST:event_tabelaPedidosMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Janela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Janela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Janela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Janela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Janela().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoCadastrar;
    private javax.swing.JButton botaoCancelar;
    private javax.swing.JButton botaoCarregarPedido;
    private javax.swing.JButton botaoFinalizar;
    private javax.swing.JButton botaoLimpar;
    private javax.swing.JButton botaoNovoPedido;
    private javax.swing.JButton botaoProximo;
    private javax.swing.JButton botaoRemoverAtividade;
    private javax.swing.JButton botaoRemoverPedido;
    private javax.swing.JButton botaoSair;
    private javax.swing.JButton botaoVoltar;
    private javax.swing.JPanel cabecalhoAtividades;
    private javax.swing.JPanel cabecalhoHome;
    private javax.swing.JPanel cabecalhoIdentifica;
    private javax.swing.JComboBox comboCategoriaAtividades;
    private javax.swing.JComboBox comboCursoAtividades;
    private javax.swing.JComboBox comboCursoIdentificacao;
    private javax.swing.JComboBox comboTipoAtividadeAtividades;
    private javax.swing.JLabel ensino;
    private javax.swing.JLabel ensino1;
    private javax.swing.JLabel ensinoIcone;
    private javax.swing.JLabel ensinoIcone1;
    private javax.swing.JLabel extensao;
    private javax.swing.JLabel extensao1;
    private javax.swing.JLabel extensaoIcone;
    private javax.swing.JLabel extensaoIcone1;
    private javax.swing.JLabel hrAprEns;
    private javax.swing.JLabel hrAprEns1;
    private javax.swing.JLabel hrAprExt;
    private javax.swing.JLabel hrAprExt1;
    private javax.swing.JLabel hrAprPes;
    private javax.swing.JLabel hrAprPes1;
    private javax.swing.JLabel hrMinEns;
    private javax.swing.JLabel hrMinEns1;
    private javax.swing.JLabel hrMinExt;
    private javax.swing.JLabel hrMinExt1;
    private javax.swing.JLabel hrMinPes;
    private javax.swing.JLabel hrMinPes1;
    private javax.swing.JLabel labelCabecalho;
    private javax.swing.JLabel labelCabecalhoAtividades;
    private javax.swing.JLabel labelCabecalhoIdentificacao;
    private javax.swing.JLabel labelCategoria;
    private javax.swing.JLabel labelCursoAtividades;
    private javax.swing.JLabel labelCursoIdentificacao;
    private javax.swing.JLabel labelDescricao;
    private javax.swing.JLabel labelMatriculaAtividades;
    private javax.swing.JLabel labelMatriculaIdentificacao;
    private javax.swing.JLabel labelNome;
    private javax.swing.JLabel labelNomeAtividades;
    private javax.swing.JLabel labelNomeIdentificacao;
    private javax.swing.JLabel labelTipoAtividade;
    private javax.swing.JLabel labelUnidade;
    private javax.swing.JLabel nomeAluno;
    private javax.swing.JLabel nomeAluno1;
    private javax.swing.JPanel painelAtividades;
    private javax.swing.JPanel painelBase;
    private javax.swing.JPanel painelGroupAtividade;
    private javax.swing.JPanel painelGroupIdentificacao;
    private javax.swing.JPanel painelGroupListaDeAtividades;
    private javax.swing.JPanel painelGroupListaDePedidos;
    private javax.swing.JPanel painelGroupResumoPedido;
    private javax.swing.JPanel painelGroupResumoPedido1;
    private javax.swing.JPanel painelHome;
    private javax.swing.JPanel painelIdentifica;
    private javax.swing.JLabel pesquisa;
    private javax.swing.JLabel pesquisa1;
    private javax.swing.JLabel pesquisaIcone;
    private javax.swing.JLabel pesquisaIcone1;
    private javax.swing.JScrollPane scrollPaneListaDeAtividades;
    private javax.swing.JScrollPane scrollTabelaHome;
    private javax.swing.JTable tabelaAtividades;
    private javax.swing.JTable tabelaPedidos;
    private javax.swing.JTextField textDescricao;
    private javax.swing.JTextField textMatriculaAtividades;
    private javax.swing.JTextField textMatriculaIdentificacao;
    private javax.swing.JTextField textNomeAtividades;
    private javax.swing.JTextField textNomeIdentificacao;
    private javax.swing.JTextField textUnidade;
    // End of variables declaration//GEN-END:variables

//==============================================================================    
// CARREGAMENTO DO SISTEMA    
//==============================================================================
    /**
     * Este método é resposável por carregar o sistema Ex: combos, classes,
     * arquivo de configuração;
     */
    private void carregaSistema() {
        ArrayList<Curso> listaCursos = new ArrayList<Curso>();
        
        
        Curso cursoCiencia = new Curso();
        Curso cursoEng = new Curso();

        Categoria.loadCategorias("ccomp");          // Carrega todas as categorias do arquivo ccomp
        // Carrega cursos na lista de cursos --> um pouco diferente dos outros pq pega dos arquivos
        cursoCiencia.setNome("Ciência da Computação");
        cursoCiencia.setCodigo(3900);
        cursoCiencia.setListaCategorias(Categoria.getListaCategorias());
        listaCursos.add(cursoCiencia);
        
        Categoria.loadCategorias("ecomp");          // Carrega todas as categorias do arquivo ecomp
        cursoEng.setNome("Engenharia de Computação");
        cursoEng.setCodigo(3910);
        cursoEng.setListaCategorias(Categoria.getListaCategorias());
        listaCursos.add(cursoEng);
        Curso.setListaCursos(listaCursos);

        //Removido codigo anterior para dar lugar aos LOADERS que jah existiam
        //Quando o codigo for carregado do JSON deve ser alterado os metodos loadCategorias() e o loadTipoAtividades();
        //pois eles jah preenchem as listas
        TipoAtividade.loadTipoAtividades();
        
        setComboCursoIdentificacao();
        setComboCursoAtividades();
        setComboTipoAtividadeAtividades();
        setComboCategoriaAtividades();
        limpaCamposAproveitamento();
    }

    /**
     * Seta todas as fontes do programa
     */
    public void setAllFonts() {
        this.botaoCadastrar.setFont(config.getFontLabel());
        this.botaoCarregarPedido.setFont(config.getFontLabel());
        this.botaoFinalizar.setFont(config.getFontLabel());
        this.botaoLimpar.setFont(config.getFontLabel());
        this.botaoNovoPedido.setFont(config.getFontLabel());
        this.botaoProximo.setFont(config.getFontLabel());
        this.botaoRemoverAtividade.setFont(config.getFontLabel());
        this.botaoRemoverPedido.setFont(config.getFontLabel());
        this.botaoSair.setFont(config.getFontLabel());
        this.botaoVoltar.setFont(config.getFontLabel());
        //this.cabecalhoAtividades.setFont(config.getFontTexto());
        //this.cabecalhoHome.setFont(config.getFontTexto());
        //this.cabecalhoIdentifica.setFont(config.getFontTexto());
        this.comboCategoriaAtividades.setFont(config.getFontTexto());
        this.comboCursoAtividades.setFont(config.getFontTexto());
        this.comboCursoIdentificacao.setFont(config.getFontTexto());
        this.comboTipoAtividadeAtividades.setFont(config.getFontTexto());
        this.labelCabecalho.setFont(config.getFontLabel());
        this.labelCabecalhoAtividades.setFont(config.getFontLabel());
        this.labelCabecalhoIdentificacao.setFont(config.getFontLabel());
        this.labelCategoria.setFont(config.getFontLabel());
        this.labelCursoAtividades.setFont(config.getFontLabel());
        this.labelCursoIdentificacao.setFont(config.getFontTexto());
        this.labelDescricao.setFont(config.getFontTexto());
        this.labelMatriculaAtividades.setFont(config.getFontTexto());
        this.labelMatriculaIdentificacao.setFont(config.getFontTexto());
        this.labelNomeAtividades.setFont(config.getFontTexto());
        this.labelNomeIdentificacao.setFont(config.getFontTexto());
        this.labelTipoAtividade.setFont(config.getFontTexto());
        this.labelUnidade.setFont(config.getFontTexto());
        this.painelAtividades.setFont(config.getFontTexto());
        this.painelBase.setFont(config.getFontTexto());
        this.painelGroupAtividade.setFont(config.getFontTexto());
        ((TitledBorder) this.painelGroupAtividade.getBorder()).setTitleFont(config.getFontTitulo());
        this.painelGroupIdentificacao.setFont(config.getFontTexto());
        ((TitledBorder) this.painelGroupIdentificacao.getBorder()).setTitleFont(config.getFontTitulo());
        this.painelGroupListaDeAtividades.setFont(config.getFontTexto());
        ((TitledBorder) this.painelGroupListaDeAtividades.getBorder()).setTitleFont(config.getFontTitulo());
        this.painelGroupListaDePedidos.setFont(config.getFontTexto());
        ((TitledBorder) this.painelGroupListaDePedidos.getBorder()).setTitleFont(config.getFontTitulo());

        this.painelHome.setFont(config.getFontTexto());
        this.painelIdentifica.setFont(config.getFontTexto());
        this.scrollPaneListaDeAtividades.setFont(config.getFontTexto());
        this.scrollTabelaHome.setFont(config.getFontTexto());
        this.tabelaAtividades.setFont(config.getFontTexto());
        this.tabelaAtividades.getTableHeader().setFont(config.getFontLabel());
        this.tabelaPedidos.setFont(config.getFontTexto());
        this.tabelaPedidos.getTableHeader().setFont(config.getFontLabel());
        this.textDescricao.setFont(config.getFontTexto());
        this.textMatriculaAtividades.setFont(config.getFontTexto());
        this.textMatriculaIdentificacao.setFont(config.getFontTexto());
        this.textNomeAtividades.setFont(config.getFontTexto());
        this.textNomeIdentificacao.setFont(config.getFontTexto());
        this.textUnidade.setFont(config.getFontTexto());
    }

//==============================================================================
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//   TELA HOME    
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++    
    /*
     Esta função carrega os pedidos retirados da pasta save e insere
     dentro da tabela de pedidos.
     */
    private void carregarTabelaPedidos() {
        
        // refresha a TableModel
        DefaultTableModel modelo = (DefaultTableModel) tabelaPedidos.getModel();
        modelo.setRowCount(0);
        
        
        if (!listaPedidos.isEmpty()) {
            listaPedidos.clear();
        }
        listaPedidos.addAll(json.parseFilesToJSON());   // carrega todos os arquivos .json para dentro da tabela
        for (Pedido p : this.listaPedidos) {
            Aluno aluno = p.getAluno();

            modelo.addRow(new Object[]{aluno.getMatricula(), aluno.getNome(), aluno.getCurso().getNome()});
        }
        
        this.tabelaPedidos.clearSelection();
        this.botaoCarregarPedido.setEnabled(false);
        this.botaoRemoverPedido.setEnabled(false);
    }

    /**
     * Seleciona um pedido da tabela de pedidos, retorna o indice do ArrayList
     * que faz refeência para o objeto Pedido.
     *
     * @return
     */
    private int selecionarPedido() {
        return this.tabelaPedidos.getSelectedRow();
    }

    /**
     * Carrega o pedido na tela do usuário.
     *
     * @param
     *
     */
    private void carregarPedido() {
        //identificacao
        this.textNomeAtividades.setText(this.pedidoAtual.getAluno().getNome());
        this.textMatriculaAtividades.setText(this.pedidoAtual.getAluno().getMatricula());
        this.comboCursoAtividades.setSelectedItem(this.pedidoAtual.getAluno().getCurso().getNome());
        mostraCalculos(this.pedidoAtual);
        limparCampos();
        carregarTabelaAtividades();
        flagPedido = true;

    }

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//   TELA IDENTIFICACAO    
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++    
    /**
     * Carrega a combo curso na tela de identificação
     */
    private void setComboCursoIdentificacao() {
        this.comboCursoIdentificacao.addItem("Selecione um curso");
        for (Curso curso : Curso.getListaCursos()) {
            this.comboCursoIdentificacao.addItem(curso.getNome());
        }
    }

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++    
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//   TELA ATIVIDADES    
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++     
    /**
     * Limpa os campos do formulário de cadastro de atividade
     *
     */
    private void limparCampos() {
        this.tabelaAtividades.clearSelection();
        this.botaoLimpar.setText("Limpar");
        this.botaoCadastrar.setText("Cadastrar");
        this.botaoRemoverAtividade.setEnabled(false);
            
        this.comboCategoriaAtividades.setSelectedIndex(0);
        this.comboTipoAtividadeAtividades.setSelectedIndex(0);
        this.textDescricao.setText(null);
        this.textUnidade.setText(null);
    }

    /**
     * Carrega a combo curso na tela de atividades
     */
    private void setComboCursoAtividades() {
        for (Curso curso : Curso.getListaCursos()) {
            this.comboCursoAtividades.addItem(curso.getNome());
        }
    }

    /**
     * Carrega a combo categoria na tela de atividades
     */
    private void setComboCategoriaAtividades() {
        this.comboCategoriaAtividades.addItem("Selecione uma Categoria");
        for (Categoria categoria : Categoria.getListaCategorias()) {
            this.comboCategoriaAtividades.addItem(categoria.getNome());
        }
    }

    /**
     * Carrega a combo Tipo Atividade na tela de atividades
     */
    private void setComboTipoAtividadeAtividades() {
        this.comboTipoAtividadeAtividades.addItem("Selecione um Tipo de Atividade");
        for (TipoAtividade ta : TipoAtividade.getListaTipoAtividades()) {
            this.comboTipoAtividadeAtividades.addItem(ta.getDescricao());
        }
    }

    /**
     * carrega as informações dos objetos na tabela atividades.
     */
    private void carregarTabelaAtividades() {
        Integer linha = 0;
        this.tabelaAtividades.clearSelection();

        String campos[] = {"N°", "Descrição", "Categoria", "Horas", "Apr. da Atividade"};
        DefaultTableModel model = new DefaultTableModel(0, 5);
        model.setColumnIdentifiers(campos);
        model.setRowCount(0);
        this.tabelaAtividades.setModel(model);

        for (Atividade a : this.pedidoAtual.getListaAtividadesComplementares()) {
            model.addRow(new Object[]{(linha + 1), a.getDescricao(), a.getCategoria().getNome(), a.getUnidadeAtividade(), calculaHorasPorTipoAtividade(a)});
            linha++;

        }
    }
    
    private void carregarAtividade(int index) {
        if (!this.pedidoAtual.getListaAtividadesComplementares().isEmpty()) {
            this.textDescricao.setText(this.pedidoAtual.getListaAtividadesComplementares().get(index).getDescricao());
            this.textUnidade.setText(this.pedidoAtual.getListaAtividadesComplementares().get(index).getUnidadeAtividadeAproveitada().toString());
            this.comboCategoriaAtividades.setSelectedItem(this.pedidoAtual.getListaAtividadesComplementares().get(index).getCategoria().getNome());
            this.comboTipoAtividadeAtividades.setSelectedItem(this.pedidoAtual.getListaAtividadesComplementares().get(index).getTipoAtividade().getDescricao());
            this.flag = true;
        }
    }
    
    private void novoPedido(String nomeAluno, String matriculaAluno, Curso cursoAluno) {
        Aluno aluno = new Aluno(nomeAluno, matriculaAluno, cursoAluno);
        this.pedidoAtual = new Pedido(aluno, 0, 0, new ArrayList<Atividade>());
    }
    
    private Integer calculaHorasPorTipoAtividade(Atividade a) {
       int aproveitamento; 
       TipoAtividade tipoAtividade = TipoAtividade.getTipoAtividadeByCod(a.getTipoAtividade().getCod());
        
       
       
        if(a.getUnidadeAtividade() > tipoAtividade.getMinHoras()){
            aproveitamento =  tipoAtividade.getMinHoras();
        } else {
            aproveitamento = a.getUnidadeAtividade();
        }
        return aproveitamento;
    }
    
    private Integer calculaHorasPorTipoAtividade(ArrayList<Atividade> atividades, TipoAtividade tipoAtividade) {
        Integer retorno = 0;
        
        for(Atividade a : atividades) {
            if(a.getTipoAtividade().equals(tipoAtividade)) {
                retorno += (retorno < tipoAtividade.getMaxHoras() ? a.getUnidadeAtividadeAproveitada() : 0);
                //retorno += ( tipoAtividade.getMinHoras() ? a.getUnidadeAtividadeAproveitada() : );
            }
        }
        return (retorno > tipoAtividade.getMaxHoras() ? tipoAtividade.getMaxHoras() : retorno);
    }
    
    private int calculaHorasCategoria(ArrayList<Atividade> atividades, Categoria c) {
        
        Integer retorno = 0;
        
        int[] controle = new int[TipoAtividade.getListaTipoAtividades().size()];
        
        for(int i = 0; i < TipoAtividade.getListaTipoAtividades().size(); i++){
            controle[i] = 0; 
        }
        
        // percorre todas as atividades
        for(Atividade a : atividades) {
            
            // verifica qual categoria 
            if (a.getCategoria().getNome().equals(c.getNome())) {
                // hora da atividade
                int hr = TipoAtividade.getTipoAtividadeByCod(a.getTipoAtividade().getCod()).getMinHoras();
                
                    // verifica se a atividade corrente já ta cheia ou não
                    // Se sim: nao adiciona nada
                    // senão: adiciona em alguma situação  
                    if(controle[(a.getTipoAtividade().getCod()-1)] < a.getTipoAtividade().getMaxHoras()){
                        
                        // Verifica se a unidade cadastrada pelo usuario é maior que a entrada padrão do tipo que ele colocou
                        // ex: Monitoria o defaul é 51 cada entrada
                        // se o cara coloca Monitoria 200 -> vai ter equivalencia a 51hrs
                        // se for menor sei lá 40 hrs fica valendo como 40hrs ao invés de 51hrs
                        if(a.getUnidadeAtividade() < hr){
                            controle[((a.getTipoAtividade().getCod()-1))] += a.getUnidadeAtividade(); 
                             
                        } else {
                            controle[((a.getTipoAtividade().getCod()-1))] += hr;
                        }
                        
                        // verifica se o controle é maior que o maxHoras da atividade
                        // se for coloca para o maximo de atividades
                        // se nao for continua adicionando normalmente.
                        if(controle[((a.getTipoAtividade().getCod()-1))] > a.getTipoAtividade().getMaxHoras()){
                            controle[((a.getTipoAtividade().getCod()-1))] = a.getTipoAtividade().getMaxHoras();
                        } 
                    }
                    
        
                
                //retorno += (retorno < a.getTipoAtividade().getMaxHoras() ? a.getUnidadeAtividadeAproveitada() : 0);
            }
        }
        
        for(int i = 0; i < TipoAtividade.getListaTipoAtividades().size(); i++){
           retorno += controle[i]; 
        }
        /**
        for(TipoAtividade tA : TipoAtividade.getListaTipoAtividades()) {
            if (tA.getCategoria().getNome().equals(c.getNome())) {
                retorno += calculaHorasPorTipoAtividade(atividades, tA);
            }
        }
        **/
        return (retorno > c.getCargaHoraria() ? c.getCargaHoraria() : retorno);
        //return retorno;
    }
    private void mostraCalculos(Pedido pedido) {
        
        Categoria pesquisa = Categoria.getCategoria("Pesquisa");
        Categoria ensino = Categoria.getCategoria("Ensino");
        Categoria extensao = Categoria.getCategoria("Extensão");
        Integer horasPesquisa = calculaHorasCategoria(pedido.getListaAtividadesComplementares(), pesquisa);
        Integer horasEnsino = calculaHorasCategoria(pedido.getListaAtividadesComplementares(), ensino);
        Integer horasExtensao = calculaHorasCategoria(pedido.getListaAtividadesComplementares(), extensao);
        
        this.hrAprEns.setText(horasEnsino.toString());
        this.hrAprEns1.setText(horasEnsino.toString());
        this.hrAprPes.setText(horasPesquisa.toString());
        this.hrAprPes1.setText(horasPesquisa.toString());
        this.hrAprExt.setText(horasExtensao.toString());
        this.hrAprExt1.setText(horasExtensao.toString());
        
        this.hrMinEns.setText(pesquisa.getCargaHoraria().toString());
        this.hrMinEns1.setText(ensino.getCargaHoraria().toString());
        this.hrMinPes.setText(pesquisa.getCargaHoraria().toString());
        this.hrMinPes1.setText(pesquisa.getCargaHoraria().toString());
        this.hrMinExt.setText(extensao.getCargaHoraria().toString());
        this.hrMinExt1.setText(extensao.getCargaHoraria().toString());
        
    }
    private void limpaCamposAproveitamento() {
        this.labelNome.setText("Aluno");
        this.hrAprEns.setText("0");
        this.hrAprEns1.setText("0");
        this.hrAprPes.setText("0");
        this.hrAprPes1.setText("0");
        this.hrAprExt.setText("0");
        this.hrAprExt1.setText("0");
        
        this.hrMinEns.setText("0");
        this.hrMinEns1.setText("0");
        this.hrMinPes.setText("0");
        this.hrMinPes1.setText("0");
        this.hrMinExt.setText("0");
        this.hrMinExt1.setText("0");
    }   
}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++
